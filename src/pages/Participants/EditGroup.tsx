import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { ArrowLeft, Plus, X, UserRound, RefreshCw, Trash } from 'lucide-react';
import { 
  Button,
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
  Input,
  Label,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { mockGroups, mockParticipants } from '../../data/mockData';
import { useToast } from '@/hooks/use-toast';
import { Participant, Category, GroupSize, Group } from '../../types';
import { getCategoryDisplay } from '../../utils/categoryUtils';
import { generateGroupName, isDuplicateGroup } from '../../utils/groupUtils';

// Schema for group registration form
const groupSchema = z.object({
  name: z.string().min(2, { message: "Name muss mindestens 2 Zeichen lang sein" }),
  category: z.enum(['kids', 'juniors', 'active']),
  size: z.enum(['three', 'four']),
});

type GroupFormValues = z.infer<typeof groupSchema>;

const EditGroup = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { toast } = useToast();
  const [selectedParticipants, setSelectedParticipants] = useState<Participant[]>([]);
  const [availableParticipants, setAvailableParticipants] = useState<Participant[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<Category>('kids');
  const [isNameAutoGenerated, setIsNameAutoGenerated] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [group, setGroup] = useState<Group | null>(null);

  // Initialize form with default values
  const form = useForm<GroupFormValues>({
    resolver: zodResolver(groupSchema),
    defaultValues: {
      name: "",
      category: "kids",
      size: "three",
    },
  });

  // Load group data when component mounts
  useEffect(() => {
    if (!id) return;
    
    const foundGroup = mockGroups.find(g => g.id === id);
    if (!foundGroup) {
      toast({
        title: "Gruppe nicht gefunden",
        description: "Die angeforderte Gruppe konnte nicht gefunden werden.",
        variant: "destructive"
      });
      navigate('/participants');
      return;
    }
    
    setGroup(foundGroup);
    
    // Set form values
    form.setValue('name', foundGroup.name);
    form.setValue('category', foundGroup.category);
    form.setValue('size', foundGroup.size);
    
    // Load selected participants
    const groupParticipants = mockParticipants.filter(p => 
      foundGroup.participantIds.includes(p.id)
    );
    setSelectedParticipants(groupParticipants);
    setSelectedCategory(foundGroup.category);
  }, [id, navigate, toast, form]);

  // Get the current values from the form
  const { category, size } = form.watch();

  // Update available participants when category changes
  useEffect(() => {
    if (!category) return;
    
    setSelectedCategory(category as Category);
    
    // Filter participants by category
    const filtered = mockParticipants.filter(
      (p) => p.category === category
    );
    setAvailableParticipants(filtered);
  }, [category]);

  // Handle adding a participant to the group
  const addParticipant = (participant: Participant) => {
    // Check if we've reached the maximum number of participants for the selected size
    const maxParticipants = size === 'three' ? 3 : 4;
    if (selectedParticipants.length >= maxParticipants) {
      toast({
        title: "Maximale Anzahl erreicht",
        description: `Eine ${size === 'three' ? 'Dreier' : 'Vierer'}gruppe kann maximal ${maxParticipants} Teilnehmer haben.`,
        variant: "destructive"
      });
      return;
    }

    // Check if participant is already selected
    if (selectedParticipants.some(p => p.id === participant.id)) {
      toast({
        title: "Teilnehmer bereits ausgewählt",
        description: `${participant.firstName} ${participant.lastName} ist bereits in dieser Gruppe.`,
        variant: "destructive"
      });
      return;
    }

    setSelectedParticipants([...selectedParticipants, participant]);
    
    // If auto-generating names, update the name
    if (isNameAutoGenerated) {
      const updatedParticipants = [...selectedParticipants, participant];
      const generatedName = generateGroupName(updatedParticipants);
      form.setValue('name', generatedName);
    }
  };

  // Handle removing a participant from the group
  const removeParticipant = (participant: Participant) => {
    setSelectedParticipants(selectedParticipants.filter(p => p.id !== participant.id));
    
    // If auto-generating names, update the name
    if (isNameAutoGenerated && selectedParticipants.length > 1) {
      const updatedParticipants = selectedParticipants.filter(p => p.id !== participant.id);
      const generatedName = generateGroupName(updatedParticipants);
      form.setValue('name', generatedName);
    }
  };

  // Handle name change
  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    form.setValue('name', e.target.value);
    setIsNameAutoGenerated(false);
  };

  // Regenerate name button handler
  const handleRegenerateName = () => {
    const generatedName = generateGroupName(selectedParticipants);
    form.setValue('name', generatedName);
    setIsNameAutoGenerated(true);
  };

  // Handle delete group
  const handleDeleteGroup = () => {
    if (!group) return;
    
    // Remove group references from participants
    mockParticipants.forEach(participant => {
      if (participant.groupIds && participant.groupIds.includes(group.id)) {
        participant.groupIds = participant.groupIds.filter(gId => gId !== group.id);
      }
    });
    
    // Remove group from mockGroups
    const groupIndex = mockGroups.findIndex(g => g.id === group.id);
    if (groupIndex !== -1) {
      mockGroups.splice(groupIndex, 1);
    }
    
    toast({
      title: "Gruppe gelöscht",
      description: `${group.name} wurde erfolgreich gelöscht.`
    });
    
    navigate('/participants');
  };

  // Handle form submission
  const onSubmit = (data: GroupFormValues) => {
    if (!group) return;
    
    if (selectedParticipants.length === 0) {
      toast({
        title: "Keine Teilnehmer ausgewählt",
        description: "Bitte wählen Sie mindestens einen Teilnehmer aus.",
        variant: "destructive"
      });
      return;
    }

    // Check if we have the right number of participants for the selected size
    const requiredParticipants = data.size === 'three' ? 3 : 4;
    if (selectedParticipants.length !== requiredParticipants) {
      toast({
        title: "Falsche Anzahl an Teilnehmern",
        description: `Eine ${data.size === 'three' ? 'Dreier' : 'Vierer'}gruppe muss genau ${requiredParticipants} Teilnehmer haben.`,
        variant: "destructive"
      });
      return;
    }
    
    // Get participant IDs for checking duplicates
    const participantIds = selectedParticipants.map(p => p.id);
    
    // Check if a duplicate group exists, excluding this group
    if (isDuplicateGroup(participantIds, group.id)) {
      toast({
        title: "Doppelte Gruppe",
        description: "Es existiert bereits eine Gruppe mit genau diesen Teilnehmern.",
        variant: "destructive"
      });
      return;
    }
    
    // Get old participant IDs to remove group association
    const oldParticipantIds = group.participantIds || [];
    const newParticipantIds = participantIds;
    
    // Remove participants who are no longer in the group
    oldParticipantIds.forEach(oldId => {
      if (!newParticipantIds.includes(oldId)) {
        const participantIndex = mockParticipants.findIndex(p => p.id === oldId);
        if (participantIndex !== -1 && mockParticipants[participantIndex].groupIds) {
          mockParticipants[participantIndex].groupIds = mockParticipants[participantIndex].groupIds!.filter(gId => gId !== group.id);
        }
      }
    });
    
    // Add new participants who weren't in the group before
    newParticipantIds.forEach(newId => {
      if (!oldParticipantIds.includes(newId)) {
        const participantIndex = mockParticipants.findIndex(p => p.id === newId);
        if (participantIndex !== -1) {
          if (!mockParticipants[participantIndex].groupIds) {
            mockParticipants[participantIndex].groupIds = [];
          }
          mockParticipants[participantIndex].groupIds!.push(group.id);
        }
      }
    });
    
    // Update group data
    const groupIndex = mockGroups.findIndex(g => g.id === group.id);
    if (groupIndex !== -1) {
      mockGroups[groupIndex] = {
        ...mockGroups[groupIndex],
        name: data.name,
        size: data.size as GroupSize,
        category: data.category as Category,
        participantIds: newParticipantIds
      };
    }
    
    toast({
      title: "Gruppe aktualisiert",
      description: `${data.name} wurde erfolgreich aktualisiert.`
    });
    
    navigate('/participants');
  };

  if (!group) {
    return <div>Lade...</div>;
  }

  return (
    <div className="animate-fade-in">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <Button variant="ghost" onClick={() => navigate('/participants')} className="mr-4">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Zurück
          </Button>
          <h1 className="text-3xl font-bold text-swiss-blue">Gruppe bearbeiten</h1>
        </div>
        <Button 
          variant="destructive" 
          onClick={() => setDeleteDialogOpen(true)}
        >
          <Trash className="h-4 w-4 mr-2" />
          Gruppe löschen
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)}>
              <CardHeader>
                <CardTitle>Gruppeninformationen</CardTitle>
                <CardDescription>
                  Bearbeiten Sie die Informationen der Gruppe
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <FormLabel>Gruppenname</FormLabel>
                    <Button 
                      type="button" 
                      variant="ghost" 
                      size="sm" 
                      onClick={handleRegenerateName}
                      className="h-8"
                    >
                      <RefreshCw className="h-3 w-3 mr-2" />
                      Auto-generieren
                    </Button>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Input 
                      placeholder="Name der Gruppe" 
                      value={form.watch('name')}
                      onChange={handleNameChange} 
                    />
                  </div>
                  {form.formState.errors.name && (
                    <p className="text-sm text-destructive">{form.formState.errors.name.message}</p>
                  )}
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="category"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Kategorie</FormLabel>
                        <Select 
                          onValueChange={field.onChange} 
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Wählen Sie eine Kategorie" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="kids">{getCategoryDisplay('kids')}</SelectItem>
                            <SelectItem value="juniors">{getCategoryDisplay('juniors')}</SelectItem>
                            <SelectItem value="active">{getCategoryDisplay('active')}</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="size"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Gruppengröße</FormLabel>
                        <Select 
                          onValueChange={field.onChange} 
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Wählen Sie eine Größe" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="three">Dreiergruppe</SelectItem>
                            <SelectItem value="four">Vierergruppe</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div>
                  <Label>Ausgewählte Teilnehmer ({selectedParticipants.length}/{size === 'three' ? '3' : '4'})</Label>
                  <div className="mt-2 space-y-2">
                    {selectedParticipants.length > 0 ? (
                      selectedParticipants.map((participant) => (
                        <div key={participant.id} className="flex items-center justify-between p-3 bg-accent/30 rounded-md">
                          <div className="flex items-center">
                            <UserRound className="h-4 w-4 mr-2 text-muted-foreground" />
                            <span>{participant.firstName} {participant.lastName}</span>
                          </div>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => removeParticipant(participant)}
                          >
                            <X className="h-4 w-4 text-destructive" />
                          </Button>
                        </div>
                      ))
                    ) : (
                      <p className="text-sm text-muted-foreground">Keine Teilnehmer ausgewählt</p>
                    )}
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline" type="button" onClick={() => navigate('/participants')}>
                  Abbrechen
                </Button>
                <Button type="submit">Gruppe speichern</Button>
              </CardFooter>
            </form>
          </Form>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Verfügbare Teilnehmer</CardTitle>
            <CardDescription>
              Wählen Sie Teilnehmer für die Gruppe aus
              {selectedCategory && ` (${getCategoryDisplay(selectedCategory)})`}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {availableParticipants.length > 0 ? (
              <div className="space-y-2 max-h-[500px] overflow-y-auto pr-2">
                {availableParticipants.map((participant) => {
                  // Check if we have the current group
                  const currentGroup = group;
                  
                  // Show existing group memberships
                  const existingGroups = participant.groupIds?.map(gId => {
                    if (currentGroup && gId === currentGroup.id) return null; // Don't show current group
                    const foundGroup = mockGroups.find(g => g.id === gId);
                    return foundGroup?.name || '';
                  }).filter(Boolean).join(', ');
                  
                  const isSelected = selectedParticipants.some(p => p.id === participant.id);
                  if (isSelected) return null;
                  
                  return (
                    <div 
                      key={participant.id} 
                      className="flex items-center justify-between p-3 border rounded-md hover:bg-accent/50 cursor-pointer"
                      onClick={() => addParticipant(participant)}
                    >
                      <div>
                        <div className="font-medium">{participant.firstName} {participant.lastName}</div>
                        <div className="text-sm text-muted-foreground">{participant.location}, {participant.birthYear}</div>
                        {existingGroups && (
                          <div className="text-xs text-muted-foreground mt-1">
                            Bereits in: {existingGroups}
                          </div>
                        )}
                      </div>
                      <Button size="icon" variant="ghost">
                        <Plus className="h-4 w-4" />
                      </Button>
                    </div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-muted-foreground">
                  {selectedCategory ? 
                    `Keine verfügbaren Teilnehmer in der Kategorie ${getCategoryDisplay(selectedCategory)}` : 
                    'Keine verfügbaren Teilnehmer'
                  }
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Gruppe löschen</DialogTitle>
            <DialogDescription>
              Sind Sie sicher, dass Sie die Gruppe "{group.name}" löschen möchten?
              Diese Aktion kann nicht rückgängig gemacht werden.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDeleteDialogOpen(false)}>
              Abbrechen
            </Button>
            <Button variant="destructive" onClick={handleDeleteGroup}>
              Löschen
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default EditGroup;
